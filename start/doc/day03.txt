연산자
=> 데이터를 가공하기 위해서 사용되는 기호

	연산자		- 가공방식을 나타내는 기호
	피연산자	- 가공에 사용되는 데이터
	
	예] 1 + 2 => + : 연산자, 1과 2는 피연산자.
	
		참고] 연산자를 사용하면 가공된 결과가 나오는데
		이 결과는 항상 큰 형태로 나오는 것을 원칙으로 한다.
		
			예] 1 + 3.14 => 4.14 이때 결과값의 데이터 형태는 double
			int + double => double
			이때 정수형 데이터는 실수형 데이터로 자동형변환이
			이루어진다.
			
		참고] 기본데이터타입 + 문자열데이터 => 문자열
		결합하는 두 항 중 하나만 문자열이어도 문자열 결합으로 처리된다.
		(문자열이 크기 때문에)
			
			예] 3.14 + "!!!!" => 3.14!!!!
			이때 + 는 산술연산을 하는 것이 아니고 문자열연산을 한다.
			
		문제] 'J' + 3.14 => ?
		'J'는 아스키 코드값이 74로 변환이 돼서 연산을 하게된다.
		따라서 74 + 3.14 의 연산을 하게 되고
		결과값은 double형 데이터 77.14가 된다.
	
	주의] 수학에서는 비교연산을 할 때
	3개의 항을 동시에 비교할 수 있었지만
	프로그래밍에서는 절대로 3개 이상의 피연산자를
	동시에 연산하는 경우는 없다.
	=> 1 < x < 10			- 수학
	   1 < x and x < 10		- 자바
	   
========================================================================

종류
	
	1. 사칙연산자
		=> 더하기 빼기 곱하기 나누기 그리고 나머지구하기
		
			기호
				+
				-
				*
				/
				%
				
		참고] 사칙연산자는 피연산자가 2개가 반드시 필요하다.
		사칙연산자가 여러개 동시에 기술된 경우에는 왼쪽부터
		차례로 계산해서 결과값을 만들어나간다.
		
		참고]  + 기호는 문자열 연산에서도 사용할 수 있다.
		(문자열 연산은 오직 + 기호만 사용할 수 있다.)
		=> 이때 문자열이 결합되어서 결과가 만들어지게 된다.
			결합이란?	앞 문자열에 뒤 문자열이 붙어서 만들어지는 것
						"홍" + "길동" => "홍길동"
			
	2. 대입연산자
		=> 변수에 데이터를 기억하도록 하는 연산자
		
			기호
				=
				+=
				-=
				*=
				/=
				%=
		
		형식] 변수 = 데이터;	반드시 순서를 지켜야한다.
		의미] 데이터를 변수에 기억시키세요.
		참고] 자바는 모든 연산이 반드시 대입연산자가 있어야 기억할 수 있다.
				만약 대입하지 않으면 연산의 결과는 기억되지 못한다.
		
		참고] 모든 연산자는 같은 연산자가 중복된 경우 왼쪽에서 오른쪽으로 진행하며 연산한다.
				하지만 대입연산자만은 오른쪽에서 왼쪽으로 진행한다.
			예] 
				int a = 10;
				int b = 20;
				int c = 30;
				int d = 40;
				
				<------------	(진행방향)
				a = b = c = d;	( => 40 = 40 = 40 = 40)
				
		참고]
				
	3. 증감연산자
		
		기호
			++ : 1 증가 시켜준다.
			-- : 1 감소 시켜준다.
		형식) ++변수
				변수++
				
		참고] 모든연산은 일반적으로 중앙처리장치에서 처리되는 것이 원칙이다.
		증감연산자, 시프트연산자는 중앙처리장치를 거치지 않는다.
		메모리상에서 연산되어 처리된다.
	
	4. 부호반전연산자
	
	5. 비교연산자
		=> 두 데이터의 대소 관계를 비교하는 연산자
		
		기호
			==	같다.
			!=	같지 않다. 다르다.
			>
			<
			>=	크거나 같다.		=>는 사용할 수 없다. 반드시 등호가 뒤에.
			<=	작거나 같다.
			
		주의] 사용되는 데이터와 관계없이 결과는 항상 논리값(true, false)으로 나온다.
		
		참고] 이 연산자는 주로 if, for, while, ...
		제어 명령에서 질문이 필요할 때 많이 사용되는 연산자이다.
		
		참고] 문자열을 비교할 경우에는 equals() 함수를 사용해야
		정확한 데이터의 비교가 이루어진다.
		
		참고] 비교연산자는 3항을 동시에 비교하지 못한다.
			예]	10 <= no < 100				X
				no >= 10 and no < 100		O
	
	6. 논리연산자
	
	7. 비트연산자
	
	8. 3항연산자(조건연산자)